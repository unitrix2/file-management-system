import React, { useState, useMemo, useEffect, useRef } from 'react';
import { Search, Plus, Edit2, Trash2, FileText, Archive, Clock, MapPin, Filter, Download, Eye, X, Printer, QrCode, FolderOpen, ChevronRight, ChevronDown, Tag, User, AlertCircle, Settings, FileDown, Folder, Files, Cloud, RefreshCw, Save, BookOpen, FileType } from 'lucide-react';

// ⚠️⚠️⚠️ LINE 5: YAHA APNA GOOGLE APPS SCRIPT URL PASTE KARO ⚠️⚠️⚠️
const GOOGLE_APPS_SCRIPT_URL = 'https://script.google.com/macros/s/AKfycbx9Qvh31x2D24CVxYESOS6dXykLWw1tcHgyqH7sj8n4WrJMg6u6xr1ynRqqe1eJOyGO/execO';

function App() {
  const [files, setFiles] = useState([]);
  const [loading, setLoading] = useState(false);
  const [syncing, setSyncing] = useState(false);
  const [lastSyncTime, setLastSyncTime] = useState(null);
  const [showModal, setShowModal] = useState(false);
  const [showDetailModal, setShowDetailModal] = useState(false);
  const [showSubFileModal, setShowSubFileModal] = useState(false);
  const [showQRModal, setShowQRModal] = useState(false);
  const [showSettingsModal, setShowSettingsModal] = useState(false);
  const [showMovementModal, setShowMovementModal] = useState(false);
  const [selectedFile, setSelectedFile] = useState(null);
  const [expandedFiles, setExpandedFiles] = useState({});
  const [searchTerm, setSearchTerm] = useState('');
  const [showSuggestions, setShowSuggestions] = useState(false);
  const [filterCategory, setFilterCategory] = useState('All');
  const [filterStatus, setFilterStatus] = useState('All');
  const [filterPriority, setFilterPriority] = useState('All');
  const [viewMode, setViewMode] = useState('table');
  const searchRef = useRef(null);

  const [formData, setFormData] = useState({ fileNumber: '', fileName: '', fileType: 'Brown File', customFileType: '', category: '', almirah: '', rack: '', row: '', column: '', pages: 0, status: 'Active', description: '', tags: [], assignedTo: '', priority: 'Medium', updateNote: '', newTag: '' });
  const [subFileForm, setSubFileForm] = useState({ name: '', type: 'Brown File', customType: '', count: 1, pages: 0 });
  const [movementForm, setMovementForm] = useState({ fromLocation: '', toLocation: '', movedBy: '', reason: '' });
  const [autoNumberSettings, setAutoNumberSettings] = useState({ enabled: true, prefix: 'FILE', year: true, counter: 3 });

  const categories = ['HR', 'Finance', 'Legal', 'Projects', 'Sales', 'Operations', 'Marketing', 'IT', 'Admin', 'Other'];
  const statuses = ['Active', 'Archived', 'Under Review', 'Pending', 'Completed', 'In Transit'];
  const priorities = ['Low', 'Medium', 'High', 'Urgent'];
  const fileTypes = ['Brown File', 'Pink File', 'White Backing', 'Register', 'Others'];

  useEffect(() => {
    const handleClickOutside = (event) => { if (searchRef.current && !searchRef.current.contains(event.target)) setShowSuggestions(false); };
    document.addEventListener('mousedown', handleClickOutside);
    return () => document.removeEventListener('mousedown', handleClickOutside);
  }, []);

  useEffect(() => { loadFromDrive(); }, []);

  useEffect(() => {
    const interval = setInterval(() => { if (files.length > 0 && GOOGLE_APPS_SCRIPT_URL !== 'https://script.google.com/macros/s/AKfycbx9Qvh31x2D24CVxYESOS6dXykLWw1tcHgyqH7sj8n4WrJMg6u6xr1ynRqqe1eJOyGO/exec') saveToDrive(true); }, 30000);
    return () => clearInterval(interval);
  }, [files]);

  const loadFromDrive = async () => {
    if (!GOOGLE_APPS_SCRIPT_URL || GOOGLE_APPS_SCRIPT_URL === 'https://script.google.com/macros/s/AKfycbx9Qvh31x2D24CVxYESOS6dXykLWw1tcHgyqH7sj8n4WrJMg6u6xr1ynRqqe1eJOyGO/exec') { loadDemoData(); return; }
    setLoading(true);
    try {
      const response = await fetch(`${GOOGLE_APPS_SCRIPT_URL}?action=getFiles`);
      const result = await response.json();
      if (result.status === 'success' && result.data.files) { setFiles(result.data.files); setLastSyncTime(new Date().toLocaleString()); } else loadDemoData();
    } catch (error) { console.error('Error:', error); loadDemoData(); } finally { setLoading(false); }
  };

  const saveToDrive = async (silent = false) => {
    if (!GOOGLE_APPS_SCRIPT_URL || GOOGLE_APPS_SCRIPT_URL === 'https://script.google.com/macros/s/AKfycbx9Qvh31x2D24CVxYESOS6dXykLWw1tcHgyqH7sj8n4WrJMg6u6xr1ynRqqe1eJOyGO/exec') { if (!silent) alert('⚠️ Google Drive not configured'); return; }
    if (!silent) setSyncing(true);
    try {
      const data = { files };
      const response = await fetch(GOOGLE_APPS_SCRIPT_URL, { method: 'POST', headers: { 'Content-Type': 'application/x-www-form-urlencoded' }, body: `action=saveFiles&data=${encodeURIComponent(JSON.stringify(data))}` });
      const result = await response.json();
      if (result.status === 'success') { setLastSyncTime(new Date().toLocaleString()); if (!silent) alert('✅ Data saved to Google Drive!'); }
    } catch (error) { console.error('Error:', error); if (!silent) alert('❌ Error saving'); } finally { if (!silent) setSyncing(false); }
  };

  const loadDemoData = () => { setFiles([{ id: 1, fileNumber: 'FILE-2024-001', fileName: 'Employee Records', fileType: 'Brown File', category: 'HR', almirah: 'A1', rack: '2', row: 'B', column: '3', pages: 150, status: 'Active', description: 'Employee documents', tags: ['Important'], assignedTo: 'HR Manager', priority: 'High', lastUpdated: '2024-10-08 14:30', createdDate: '2024-01-15', subFiles: [{ id: 's1', name: 'Joining Letters', type: 'Brown File', count: 25, pages: 50, lastUpdated: '2024-10-08' }], movements: [{ date: '2024-10-08 14:30', from: 'New', to: 'A1-R2-B3', movedBy: 'Admin', reason: 'Created', type: 'Creation' }], updates: [{ date: '2024-10-08 14:30', note: 'Initial creation', user: 'Admin' }] }]); };

  const generateFileNumber = () => { if (!autoNumberSettings.enabled) return ''; let number = autoNumberSettings.prefix; if (autoNumberSettings.year) number += '-' + new Date().getFullYear(); const maxNumber = files.reduce((max, file) => { const match = file.fileNumber.match(/\d+$/); return match ? Math.max(max, parseInt(match[0])) : max; }, 0); return number + '-' + (maxNumber + 1).toString().padStart(autoNumberSettings.counter, '0'); };

  const getCurrentDateTime = () => { return new Date().toLocaleString('en-GB', { day: '2-digit', month: '2-digit', year: 'numeric', hour: '2-digit', minute: '2-digit', hour12: false }).replace(',', ''); };

  const stats = useMemo(() => { const totalSubFiles = files.reduce((sum, f) => sum + (f.subFiles?.length || 0), 0); const totalRegisters = files.reduce((sum, f) => { const mainRegister = f.fileType === 'Register' ? 1 : 0; const subRegisters = (f.subFiles || []).filter(sf => sf.type === 'Register').length; return sum + mainRegister + subRegisters; }, 0); const totalPages = files.reduce((sum, f) => { const mainPages = f.pages || 0; const subPages = (f.subFiles || []).reduce((s, sf) => s + (sf.pages || 0), 0); return sum + mainPages + subPages; }, 0); return { total: files.length, active: files.filter(f => f.status === 'Active').length, archived: files.filter(f => f.status === 'Archived').length, categories: new Set(files.map(f => f.category)).size, urgent: files.filter(f => f.priority === 'Urgent').length, subFiles: totalSubFiles, registers: totalRegisters, totalPages: totalPages }; }, [files]);

  const searchSuggestions = useMemo(() => { if (!searchTerm || searchTerm.length < 2) return []; const suggestions = new Set(); const term = searchTerm.toLowerCase(); files.forEach(file => { if (file.fileName.toLowerCase().includes(term)) suggestions.add(file.fileName); if (file.fileNumber.toLowerCase().includes(term)) suggestions.add(file.fileNumber); if (file.category.toLowerCase().includes(term)) suggestions.add(file.category); if (file.almirah.toLowerCase().includes(term)) suggestions.add(`Almirah ${file.almirah}`); (file.tags || []).forEach(tag => { if (tag.toLowerCase().includes(term)) suggestions.add(tag); }); (file.subFiles || []).forEach(sf => { if (sf.name.toLowerCase().includes(term)) suggestions.add(sf.name); }); }); return Array.from(suggestions).slice(0, 10); }, [searchTerm, files]);

  const filteredFiles = useMemo(() => { return files.filter(file => { const term = searchTerm.toLowerCase(); const matchesSearch = file.fileName.toLowerCase().includes(term) || file.fileNumber.toLowerCase().includes(term) || file.description.toLowerCase().includes(term) || file.fileType.toLowerCase().includes(term) || file.almirah.toLowerCase().includes(term) || (file.tags && file.tags.some(tag => tag.toLowerCase().includes(term))) || (file.subFiles && file.subFiles.some(sf => sf.name.toLowerCase().includes(term))); const matchesCategory = filterCategory === 'All' || file.category === filterCategory; const matchesStatus = filterStatus === 'All' || file.status === filterStatus; const matchesPriority = filterPriority === 'All' || file.priority === filterPriority; return matchesSearch && matchesCategory && matchesStatus && matchesPriority; }); }, [files, searchTerm, filterCategory, filterStatus, filterPriority]);

  const handleAddEdit = () => { if (!formData.fileNumber || !formData.fileName) { alert('File Number and Name required!'); return; } const finalFileType = formData.fileType === 'Others' ? formData.customFileType : formData.fileType; if (formData.fileType === 'Others' && !formData.customFileType) { alert('Enter custom type'); return; } const currentDateTime = getCurrentDateTime(); const currentLocation = `${formData.almirah}-R${formData.rack}-${formData.row}${formData.column}`; if (selectedFile) { const updatedFiles = files.map(f => { if (f.id === selectedFile.id) { const oldLocation = `${f.almirah}-R${f.rack}-${f.row}${f.column}`; const locationChanged = oldLocation !== currentLocation; const statusChanged = f.status !== formData.status; const newMovements = [...(f.movements || [])]; if (locationChanged || statusChanged) { newMovements.push({ date: currentDateTime, from: oldLocation, to: currentLocation, movedBy: formData.assignedTo || 'Admin', reason: formData.updateNote || (statusChanged ? `Status: ${formData.status}` : 'Updated'), type: statusChanged ? 'Status Change' : 'Movement' }); } const updates = formData.updateNote ? [...(f.updates || []), { date: currentDateTime, note: formData.updateNote, user: formData.assignedTo || 'Admin' }] : f.updates || []; return { ...f, ...formData, fileType: finalFileType, lastUpdated: currentDateTime, movements: newMovements, updates }; } return f; }); setFiles(updatedFiles); } else { const newFile = { id: Date.now(), ...formData, fileType: finalFileType, createdDate: new Date().toISOString().split('T')[0], lastUpdated: currentDateTime, subFiles: [], movements: [{ date: currentDateTime, from: 'New', to: currentLocation, movedBy: formData.assignedTo || 'Admin', reason: 'Created', type: 'Creation' }], updates: formData.updateNote ? [{ date: currentDateTime, note: formData.updateNote, user: formData.assignedTo || 'Admin' }] : [] }; setFiles([...files, newFile]); } closeModal(); saveToDrive(true); };

  const handleDelete = (id) => { if (window.confirm('Delete file?')) { setFiles(files.filter(f => f.id !== id)); saveToDrive(true); } };

  const openModal = (file = null) => { if (file) { setSelectedFile(file); setFormData({ fileNumber: file.fileNumber, fileName: file.fileName, fileType: file.fileType, customFileType: '', category: file.category, almirah: file.almirah, rack: file.rack, row: file.row, column: file.column, pages: file.pages || 0, status: file.status, description: file.description, tags: file.tags || [], assignedTo: file.assignedTo || '', priority: file.priority || 'Medium', updateNote: '', newTag: '' }); } else { setSelectedFile(null); setFormData({ fileNumber: generateFileNumber(), fileName: '', fileType: 'Brown File', customFileType: '', category: '', almirah: '', rack: '', row: '', column: '', pages: 0, status: 'Active', description: '', tags: [], assignedTo: '', priority: 'Medium', updateNote: '', newTag: '' }); } setShowModal(true); };

  const closeModal = () => { setShowModal(false); setSelectedFile(null); };
  const viewDetails = (file) => { setSelectedFile(file); setShowDetailModal(true); };
  const addTag = () => { if (formData.newTag && !formData.tags.includes(formData.newTag)) { setFormData({ ...formData, tags: [...formData.tags, formData.newTag], newTag: '' }); } };
  const removeTag = (tagToRemove) => { setFormData({ ...formData, tags: formData.tags.filter(tag => tag !== tagToRemove) }); };

  const openSubFileModal = (file) => { setSelectedFile(file); setSubFileForm({ name: '', type: 'Brown File', customType: '', count: 1, pages: 0 }); setShowSubFileModal(true); };

  const addSubFile = () => { if (!subFileForm.name) { alert('Sub-file name required!'); return; } const finalType = subFileForm.type === 'Others' ? subFileForm.customType : subFileForm.type; if (subFileForm.type === 'Others' && !subFileForm.customType) { alert('Enter custom type'); return; } const updatedFiles = files.map(f => { if (f.id === selectedFile.id) { const newSubFile = { id: 'sf' + Date.now(), name: subFileForm.name, type: finalType, count: parseInt(subFileForm.count) || 1, pages: parseInt(subFileForm.pages) || 0, lastUpdated: new Date().toISOString().split('T')[0] }; return { ...f, subFiles: [...(f.subFiles || []), newSubFile], lastUpdated: getCurrentDateTime() }; } return f; }); setFiles(updatedFiles); setSubFileForm({ name: '', type: 'Brown File', customType: '', count: 1, pages: 0 }); saveToDrive(true); };

  const deleteSubFile = (fileId, subFileId) => { if (window.confirm('Delete sub-file?')) { const updatedFiles = files.map(f => { if (f.id === fileId) return { ...f, subFiles: (f.subFiles || []).filter(sf => sf.id !== subFileId) }; return f; }); setFiles(updatedFiles); saveToDrive(true); } };

  const openMovementModal = (file) => { setSelectedFile(file); setMovementForm({ fromLocation: `${file.almirah}-R${file.rack}-${file.row}${file.column}`, toLocation: '', movedBy: '', reason: '' }); setShowMovementModal(true); };

  const addMovement = () => { if (!movementForm.toLocation || !movementForm.movedBy) { alert('Location and person required!'); return; } const updatedFiles = files.map(f => { if (f.id === selectedFile.id) { const newMovement = { date: getCurrentDateTime(), from: movementForm.fromLocation, to: movementForm.toLocation, movedBy: movementForm.movedBy, reason: movementForm.reason || 'Moved', type: 'Movement' }; const parts = movementForm.toLocation.split('-'); const almirah = parts[0] || ''; const rack = parts[1]?.replace('R', '') || ''; const rowCol = parts[2] || ''; const row = rowCol.charAt(0) || ''; const column = rowCol.slice(1) || ''; return { ...f, almirah, rack, row, column, status: 'In Transit', movements: [...(f.movements || []), newMovement], lastUpdated: getCurrentDateTime() }; } return f; }); setFiles(updatedFiles); setShowMovementModal(false); saveToDrive(true); };

  const toggleExpand = (fileId) => { setExpandedFiles(prev => ({ ...prev, [fileId]: !prev[fileId] })); };

  const exportToJSON = () => { const link = document.createElement('a'); link.href = URL.createObjectURL(new Blob([JSON.stringify(files, null, 2)], { type: 'application/json' })); link.download = `files-${new Date().toISOString().split('T')[0]}.json`; link.click(); };

  const exportToCSV = () => { const headers = ['File Number', 'Name', 'Type', 'Category', 'Location', 'Pages', 'Status']; const rows = files.map(f => [f.fileNumber, f.fileName, f.fileType, f.category, `${f.almirah}-R${f.rack}-${f.row}${f.column}`, f.pages || 0, f.status]); const csv = [headers, ...rows].map(row => row.map(cell => `"${cell}"`).join(',')).join('\n'); const link = document.createElement('a'); link.href = URL.createObjectURL(new Blob([csv], { type: 'text/csv' })); link.download = `files-${new Date().toISOString().split('T')[0]}.csv`; link.click(); };

  const generateQR = (file) => { setSelectedFile(file); setShowQRModal(true); };

  const getStatusColor = (status) => { const colors = { 'Active': 'bg-green-100 text-green-800', 'Archived': 'bg-gray-100 text-gray-800', 'Under Review': 'bg-yellow-100 text-yellow-800', 'Pending': 'bg-blue-100 text-blue-800', 'Completed': 'bg-purple-100 text-purple-800', 'In Transit': 'bg-orange-100 text-orange-800' }; return colors[status] || 'bg-gray-100 text-gray-800'; };

  const getPriorityColor = (priority) => { const colors = { 'Low': 'bg-gray-100 text-gray-600', 'Medium': 'bg-blue-100 text-blue-600', 'High': 'bg-orange-100 text-orange-600', 'Urgent': 'bg-red-100 text-red-600' }; return colors[priority] || 'bg-gray-100 text-gray-600'; };

  const getFileTypeColor = (type) => { const colors = { 'Brown File': 'bg-amber-100 text-amber-800', 'Pink File': 'bg-pink-100 text-pink-800', 'White Backing': 'bg-slate-100 text-slate-800', 'Register': 'bg-emerald-100 text-emerald-800' }; return colors[type] || 'bg-indigo-100 text-indigo-800'; };

  const getTotalPages = (file) => (file.pages || 0) + (file.subFiles || []).reduce((sum, sf) => sum + (sf.pages || 0), 0);

  if (loading) { return (<div className="min-h-screen bg-gradient-to-br from-slate-50 via-blue-50 to-indigo-50 flex items-center justify-center"><div className="text-center"><Cloud size={64} className="mx-auto text-blue-600 animate-bounce mb-4" /><p className="text-xl font-semibold text-gray-700">Loading...</p></div></div>); }

  return (<div className="min-h-screen bg-gradient-to-br from-slate-50 via-blue-50 to-indigo-50"><div className="bg-white shadow-lg border-b"><div className="max-w-7xl mx-auto px-6 py-6"><div className="flex items-center justify-between flex-wrap gap-4"><div><h1 className="text-3xl font-bold text-gray-900 flex items-center gap-3"><div className="bg-gradient-to-br from-blue-600 to-indigo-600 p-3 rounded-xl shadow-lg"><FileText className="text-white" size={32} /></div>File Management System</h1><p className="text-gray-600 mt-2 ml-14 flex items-center gap-2 text-sm"><Cloud size={14} />{GOOGLE_APPS_SCRIPT_URL === 'YAHA_APNA_GOOGLE_APPS_SCRIPT_URL_PASTE_KARO' ? 'Demo Mode' : 'Google Drive Connected'}{lastSyncTime && <span className="text-xs text-green-600">• {lastSyncTime}</span>}</p></div><div className="flex gap-2 flex-wrap"><button onClick={() => loadFromDrive()} className="bg-blue-100 text-blue-700 px-4 py-2 rounded-xl hover:bg-blue-200"><RefreshCw size={18} /></button><button onClick={() => saveToDrive(false)} disabled={syncing} className="bg-green-100 text-green-700 px-4 py-2 rounded-xl hover:bg-green-200 disabled:opacity-50">{syncing ? <RefreshCw size={18} className="animate-spin" /> : <Save size={18} />}</button><button onClick={() => setShowSettingsModal(true)} className="bg-gray-100 px-4 py-2 rounded-xl hover:bg-gray-200"><Settings size={18} /></button><button onClick={() => openModal()} className="bg-gradient-to-r from-blue-600 to-indigo-600 text-white px-6 py-2 rounded-xl hover:from-blue-700 hover:to-indigo-700 shadow-lg flex items-center gap-2"><Plus size={18} />Add File</button></div></div></div></div><div className="max-w-7xl mx-auto px-6 py-8"><div className="grid grid-cols-2 md:grid-cols-4 lg:grid-cols-8 gap-3 mb-8">{[{ label: 'Total', value: stats.total, icon: FileText, color: 'blue' }, { label: 'Active', value: stats.active, icon: FileText, color: 'green' }, { label: 'Archived', value: stats.archived, icon: Archive, color: 'gray' }, { label: 'Categories', value: stats.categories, icon: Filter, color: 'indigo' }, { label: 'Urgent', value: stats.urgent, icon: AlertCircle, color: 'red' }, { label: 'Sub-Files', value: stats.subFiles, icon: Folder, color: 'purple' }, { label: 'Registers', value: stats.registers, icon: BookOpen, color: 'emerald' }, { label: 'Pages', value: stats.totalPages, icon: FileType, color: 'cyan' }].map(({ label, value, icon: Icon, color }) => (<div key={label} className="bg-white rounded-xl shadow p-4"><div className="text-center"><div className={`bg-${color}-100 w-10 h-10 rounded-lg flex items-center justify-center mx-auto mb-2`}><Icon className={`text-${color}-600`} size={20} /></div><p className="text-xl font-bold">{value}</p><p className="text-xs text-gray-600">{label}</p></div></div>))}</div><div className="bg-white rounded-xl shadow p-6 mb-8"><div className="grid grid-cols-1 md:grid-cols-5 gap-3 mb-4"><div className="md:col-span-2 relative" ref={searchRef}><Search className="absolute left-3 top-3 text-gray-400" size={18} /><input type="text" placeholder="Search..." value={searchTerm} onChange={(e) => { setSearchTerm(e.target.value); setShowSuggestions(e.target.value.length >= 2); }} onFocus={() => searchTerm.length >= 2 && setShowSuggestions(true)} className="w-full pl-10 pr-4 py-2 border rounded-lg focus:ring-2 focus:ring-blue-500" />{showSuggestions && searchSuggestions.length > 0 && (<div className="absolute z-50 w-full mt-1 bg-white border rounded-lg shadow-xl max-h-60 overflow-y-auto">{searchSuggestions.map((s, i) => (<button key={i} onClick={() => { setSearchTerm(s); setShowSuggestions(false); }} className="w-full px-4 py-2 text-left hover:bg-blue-50 border-b last:border-b-0">{s}</button>))}</div>)}</div><select value={filterCategory} onChange={(e) => setFilterCategory(e.target.value)} className="px-3 py-2 border rounded-lg"><option value="All">All Categories</option>{categories.map(c => <option key={c} value={c}>{c}</option>)}</select><select value={filterStatus} onChange={(e) => setFilterStatus(e.target.value)} className="px-3 py-2 border rounded-lg"><option value="All">All Status</option>{statuses.map(s => <option key={s} value={s}>{s}</option>)}</select><select value={filterPriority} onChange={(e) => setFilterPriority(e.target.value)} className="px-3 py-2 border rounded-lg"><option value="All">All Priority</option>{priorities.map(p => <option key={p} value={p}>{p}</option>)}</select></div><div className="flex justify-between items-center flex-wrap gap-2"><div className="flex gap-2"><button onClick={() => setViewMode('table')} className={`px-4 py-2 rounded-lg ${viewMode === 'table' ? 'bg-blue-600 text-white' : 'bg-gray-100'}`}>Table</button><button onClick={() => setViewMode('grid')} className={`px-4 py-2 rounded-lg ${viewMode === 'grid' ? 'bg-blue-600 text-white' : 'bg-gray-100'}`}>Grid</button></div><div className="flex gap-2"><button onClick={exportToCSV} className="px-3 py-2 bg-green-100 text-green-700 rounded-lg hover:bg-green-200 text-sm">CSV</button><button onClick={exportToJSON} className="px-3 py-2 bg-blue-100 text-blue-700 rounded-lg hover:bg-blue-200 text-sm">JSON</button><button onClick={() => window.print()} className="px-3 py-2 bg-gray-100 rounded-lg hover:bg-gray-200 text-sm">Print</button></div></div></div>{viewMode === 'table' ? (<div className="bg-white rounded-xl shadow overflow-hidden"><table className="w-full"><thead className="bg-gray-50 border-b"><tr><th className="px-4 py-3 text-left text-xs font-semibold text-gray-700">FILE INFO</th><th className="px-4 py-3 text-left text-xs font-semibold text-gray-700">TYPE</th><th className="px-4 py-3 text-left text-xs font-semibold text-gray-700">LOCATION</th><th className="px-4 py-3 text-left text-xs font-semibold text-gray-700">PAGES</th><th className="px-4 py-3 text-left text-xs font-semibold text-gray-700">STATUS</th><th className="px-4 py-3 text-left text-xs font-semibold text-gray-700">ACTIONS</th></tr></thead><tbody className="divide-y">{filteredFiles.map((file) => (<React.Fragment key={file.id}><tr className="hover:bg-blue-50"><td className="px-4 py-3"><div className="flex items-center gap-2">{file.subFiles?.length > 0 && (<button onClick={() => toggleExpand(file.id)} className="text-gray-400">{expandedFiles[file.id] ? <ChevronDown size={16} /> : <ChevronRight size={16} />}</button>)}<div><div className="font-mono text-xs font-semibold">{file.fileNumber}</div><div className="text-sm font-medium">{file.fileName}</div></div></div></td><td className="px-4 py-3"><span className={`px-2 py-1 text-xs rounded-full ${getFileTypeColor(file.fileType)}`}>{file.fileType}</span></td><td className="px-4 py-3"><div className="text-sm">{file.almirah}-R{file.rack}-{file.row}{file.column}</div></td><td className="px-4 py-3"><div className="text-sm font-semibold">{getTotalPages(file)}</div></td><td className="px-4 py-3"><span className={`px-2 py-1 text-xs rounded-full ${getStatusColor(file.status)}`}>{
  file.status}</span></td><td className="px-4 py-3"><div className="flex gap-1"><button onClick={() => viewDetails(file)} className="p-1 text-blue-600 hover:bg-blue-100 rounded" title="View"><Eye size={14} /></button><button onClick={() => openSubFileModal(file)} className="p-1 text-purple-600 hover:bg-purple-100 rounded" title="Sub-Files"><FolderOpen size={14} /></button><button onClick={() => openMovementModal(file)} className="p-1 text-orange-600 hover:bg-orange-100 rounded" title="Move"><MapPin size={14} /></button><button onClick={() => generateQR(file)} className="p-1 text-indigo-600 hover:bg-indigo-100 rounded" title="QR"><QrCode size={14} /></button><button onClick={() => openModal(file)} className="p-1 text-green-600 hover:bg-green-100 rounded" title="Edit"><Edit2 size={14} /></button><button onClick={() => handleDelete(file.id)} className="p-1 text-red-600 hover:bg-red-100 rounded" title="Delete"><Trash2 size={14} /></button></div></td></tr>{expandedFiles[file.id] && file.subFiles?.length > 0 && (<tr><td colSpan="6" className="px-4 py-2 bg-gray-50"><div className="ml-8 space-y-1">{file.subFiles.map(sf => (<div key={sf.id} className="flex items-center justify-between bg-white p-2 rounded border text-sm"><div className="flex items-center gap-2"><Files size={14} className="text-purple-600" /><span className="font-medium">{sf.name}</span><span className={`px-2 py-0.5 text-xs rounded ${getFileTypeColor(sf.type)}`}>{sf.type}</span><span className="text-xs text-gray-500">Count: {sf.count} | Pages: {sf.pages || 0}</span></div><button onClick={() => deleteSubFile(file.id, sf.id)} className="text-red-600 hover:bg-red-100 p-1 rounded"><Trash2 size={12} /></button></div>))}</div></td></tr>)}</React.Fragment>))}</tbody></table>{filteredFiles.length === 0 && (<div className="text-center py-12"><FileText className="mx-auto text-gray-300" size={48} /><p className="text-gray-500 mt-4">No files found</p></div>)}</div>) : (<div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">{filteredFiles.map(file => (<div key={file.id} className="bg-white rounded-xl shadow p-4 hover:shadow-lg transition"><div className="font-mono text-xs text-gray-500">{file.fileNumber}</div><h3 className="font-bold text-lg mt-1">{file.fileName}</h3><div className="flex gap-2 mt-2 mb-3"><span className={`px-2 py-1 text-xs rounded ${getFileTypeColor(file.fileType)}`}>{file.fileType}</span><span className={`px-2 py-1 text-xs rounded ${getPriorityColor(file.priority)}`}>{file.priority}</span></div><div className="text-sm text-gray-600 space-y-1"><div>📍 {file.almirah}-R{file.rack}-{file.row}{file.column}</div><div>📄 {getTotalPages(file)} pages</div>{file.subFiles?.length > 0 && <div>📁 {file.subFiles.length} sub-files</div>}</div><div className="flex gap-2 mt-3"><button onClick={() => viewDetails(file)} className="flex-1 bg-blue-100 text-blue-700 py-2 rounded-lg hover:bg-blue-200 text-sm">View</button><button onClick={() => openModal(file)} className="flex-1 bg-green-100 text-green-700 py-2 rounded-lg hover:bg-green-200 text-sm">Edit</button></div></div>))}</div>)}</div></div>{showModal && (<div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50"><div className="bg-white rounded-xl max-w-4xl w-full max-h-[90vh] overflow-y-auto"><div className="bg-gradient-to-r from-blue-600 to-indigo-600 px-6 py-4 flex items-center justify-between"><h2 className="text-xl font-bold text-white">{selectedFile ? 'Edit File' : 'Add File'}</h2><button onClick={closeModal} className="text-white hover:bg-white hover:bg-opacity-20 rounded p-2"><X size={20} /></button></div><div className="p-6"><div className="grid grid-cols-1 md:grid-cols-3 gap-4"><div><label className="block text-sm font-semibold mb-1">File Number *</label><input type="text" value={formData.fileNumber} onChange={(e) => setFormData({...formData, fileNumber: e.target.value})} className="w-full px-3 py-2 border rounded-lg" disabled={!selectedFile && autoNumberSettings.enabled} /></div><div className="md:col-span-2"><label className="block text-sm font-semibold mb-1">File Name *</label><input type="text" value={formData.fileName} onChange={(e) => setFormData({...formData, fileName: e.target.value})} className="w-full px-3 py-2 border rounded-lg" /></div><div><label className="block text-sm font-semibold mb-1">File Type *</label><select value={formData.fileType} onChange={(e) => setFormData({...formData, fileType: e.target.value})} className="w-full px-3 py-2 border rounded-lg">{fileTypes.map(t => <option key={t} value={t}>{t}</option>)}</select></div>{formData.fileType === 'Others' && (<div><label className="block text-sm font-semibold mb-1">Custom Type *</label><input type="text" value={formData.customFileType} onChange={(e) => setFormData({...formData, customFileType: e.target.value})} className="w-full px-3 py-2 border rounded-lg" /></div>)}<div><label className="block text-sm font-semibold mb-1">Category *</label><select value={formData.category} onChange={(e) => setFormData({...formData, category: e.target.value})} className="w-full px-3 py-2 border rounded-lg"><option value="">Select</option>{categories.map(c => <option key={c} value={c}>{c}</option>)}</select></div><div><label className="block text-sm font-semibold mb-1">Pages</label><input type="number" value={formData.pages} onChange={(e) => setFormData({...formData, pages: parseInt(e.target.value) || 0})} className="w-full px-3 py-2 border rounded-lg" min="0" /></div><div><label className="block text-sm font-semibold mb-1">Almirah *</label><input type="text" value={formData.almirah} onChange={(e) => setFormData({...formData, almirah: e.target.value})} className="w-full px-3 py-2 border rounded-lg" placeholder="A1" /></div><div><label className="block text-sm font-semibold mb-1">Rack *</label><input type="text" value={formData.rack} onChange={(e) => setFormData({...formData, rack: e.target.value})} className="w-full px-3 py-2 border rounded-lg" placeholder="2" /></div><div><label className="block text-sm font-semibold mb-1">Row *</label><input type="text" value={formData.row} onChange={(e) => setFormData({...formData, row: e.target.value})} className="w-full px-3 py-2 border rounded-lg" placeholder="B" /></div><div><label className="block text-sm font-semibold mb-1">Column *</label><input type="text" value={formData.column} onChange={(e) => setFormData({...formData, column: e.target.value})} className="w-full px-3 py-2 border rounded-lg" placeholder="3" /></div><div><label className="block text-sm font-semibold mb-1">Status *</label><select value={formData.status} onChange={(e) => setFormData({...formData, status: e.target.value})} className="w-full px-3 py-2 border rounded-lg">{statuses.map(s => <option key={s} value={s}>{s}</option>)}</select></div><div><label className="block text-sm font-semibold mb-1">Priority *</label><select value={formData.priority} onChange={(e) => setFormData({...formData, priority: e.target.value})} className="w-full px-3 py-2 border rounded-lg">{priorities.map(p => <option key={p} value={p}>{p}</option>)}</select></div><div><label className="block text-sm font-semibold mb-1">Assigned To</label><input type="text" value={formData.assignedTo} onChange={(e) => setFormData({...formData, assignedTo: e.target.value})} className="w-full px-3 py-2 border rounded-lg" /></div><div className="md:col-span-3"><label className="block text-sm font-semibold mb-1">Description</label><textarea value={formData.description} onChange={(e) => setFormData({...formData, description: e.target.value})} className="w-full px-3 py-2 border rounded-lg" rows="2" /></div><div className="md:col-span-3"><label className="block text-sm font-semibold mb-1">Tags</label><div className="flex gap-2 mb-2"><input type="text" value={formData.newTag} onChange={(e) => setFormData({...formData, newTag: e.target.value})} onKeyPress={(e) => e.key === 'Enter' && (e.preventDefault(), addTag())} className="flex-1 px-3 py-2 border rounded-lg" placeholder="Add tag" /><button onClick={addTag} className="px-4 py-2 bg-purple-600 text-white rounded-lg">Add</button></div><div className="flex gap-2 flex-wrap">{formData.tags.map(tag => (<span key={tag} className="px-3 py-1 bg-purple-100 text-purple-700 rounded-full text-sm flex items-center gap-2">{tag}<button onClick={() => removeTag(tag)}><X size={12} /></button></span>))}</div></div><div className="md:col-span-3"><label className="block text-sm font-semibold mb-1">Update Note</label><textarea value={formData.updateNote} onChange={(e) => setFormData({...formData, updateNote: e.target.value})} className="w-full px-3 py-2 border rounded-lg" rows="2" /></div></div><div className="flex gap-3 mt-6"><button onClick={handleAddEdit} className="flex-1 bg-gradient-to-r from-blue-600 to-indigo-600 text-white px-6 py-3 rounded-xl font-semibold">{selectedFile ? 'Update' : 'Add'} File</button><button onClick={closeModal} className="px-6 py-3 bg-gray-100 rounded-xl font-semibold">Cancel</button></div></div></div></div>)}{showDetailModal && selectedFile && (<div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50"><div className="bg-white rounded-xl max-w-3xl w-full max-h-[90vh] overflow-y-auto"><div className="bg-gradient-to-r from-blue-600 to-indigo-600 px-6 py-4 flex items-center justify-between"><h2 className="text-xl font-bold text-white">File Details</h2><button onClick={() => setShowDetailModal(false)} className="text-white p-2"><X size={20} /></button></div><div className="p-6 space-y-4"><div className="bg-blue-50 p-4 rounded-xl"><h3 className="text-2xl font-bold">{selectedFile.fileName}</h3><p className="font-mono text-sm text-gray-600 mt-2">{selectedFile.fileNumber}</p></div><div className="bg-red-50 p-4 rounded-xl border border-red-200"><h4 className="font-bold mb-2 flex items-center gap-2"><MapPin size={20} className="text-red-600" />Location</h4><p className="text-lg">Almirah <strong>{selectedFile.almirah}</strong> → Rack <strong>{selectedFile.rack}</strong> → Row <strong>{selectedFile.row}</strong> → Column <strong>{selectedFile.column}</strong></p></div><div className="grid grid-cols-2 gap-4"><div className="bg-cyan-50 p-4 rounded-xl"><p className="text-xs font-semibold text-cyan-600">PAGES</p><p className="text-2xl font-bold text-cyan-700">{getTotalPages(selectedFile)}</p></div><div className="bg-purple-50 p-4 rounded-xl"><p className="text-xs font-semibold text-purple-600">SUB-FILES</p><p className="text-2xl font-bold text-purple-700">{selectedFile.subFiles?.length || 0}</p></div></div>{selectedFile.subFiles?.length > 0 && (<div><h4 className="font-bold mb-2">Sub-Files</h4>{selectedFile.subFiles.map(sf => (<div key={sf.id} className="bg-purple-50 p-3 rounded-lg mb-2"><div className="font-semibold">{sf.name} <span className={`px-2 py-0.5 text-xs rounded ml-2 ${getFileTypeColor(sf.type)}`}>{sf.type}</span></div><div className="text-sm text-gray-600">Count: {sf.count} | Pages: {sf.pages || 0}</div></div>))}</div>)}<button onClick={() => setShowDetailModal(false)} className="w-full bg-blue-600 text-white py-3 rounded-xl font-semibold">Close</button></div></div></div>)}{showSubFileModal && selectedFile && (<div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50"><div className="bg-white rounded-xl max-w-2xl w-full"><div className="bg-purple-600 px-6 py-4 flex items-center justify-between"><h2 className="text-xl font-bold text-white">Add Sub-File</h2><button onClick={() => setShowSubFileModal(false)} className="text-white p-2"><X size={20} /></button></div><div className="p-6"><div className="space-y-4"><div><label className="block text-sm font-semibold mb-1">Sub-File Name *</label><input type="text" value={subFileForm.name} onChange={(e) => setSubFileForm({...subFileForm, name: e.target.value})} className="w-full px-3 py-2 border rounded-lg" /></div><div className="grid grid-cols-2 gap-4"><div><label className="block text-sm font-semibold mb-1">Type *</label><select value={subFileForm.type} onChange={(e) => setSubFileForm({...subFileForm, type: e.target.value})} className="w-full px-3 py-2 border rounded-lg">{fileTypes.map(t => <option key={t} value={t}>{t}</option>)}</select></div>{subFileForm.type === 'Others' && (<div><label className="block text-sm font-semibold mb-1">Custom Type *</label><input type="text" value={subFileForm.customType} onChange={(e) => setSubFileForm({...subFileForm, customType: e.target.value})} className="w-full px-3 py-2 border rounded-lg" /></div>)}</div><div className="grid grid-cols-2 gap-4"><div><label className="block text-sm font-semibold mb-1">Count</label><input type="number" value={subFileForm.count} onChange={(e) => setSubFileForm({...subFileForm, count: e.target.value})} className="w-full px-3 py-2 border rounded-lg" min="1" /></div><div><label className="block text-sm font-semibold mb-1">Pages</label><input type="number" value={subFileForm.pages} onChange={(e) => setSubFileForm({...subFileForm, pages: e.target.value})} className="w-full px-3 py-2 border rounded-lg" min="0" /></div></div></div><div className="flex gap-3 mt-6"><button onClick={addSubFile} className="flex-1 bg-purple-600 text-white px-6 py-3 rounded-xl font-semibold">Add Sub-File</button><button onClick={() => setShowSubFileModal(false)} className="px-6 py-3 bg-gray-100 rounded-xl font-semibold">Close</button></div></div></div></div>)}{showMovementModal && selectedFile && (<div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50"><div className="bg-white rounded-xl max-w-2xl w-full"><div className="bg-orange-600 px-6 py-4 flex items-center justify-between"><h2 className="text-xl font-bold text-white">Move File</h2><button onClick={() => setShowMovementModal(false)} className="text-white p-2"><X size={20} /></button></div><div className="p-6"><div className="space-y-4"><div className="bg-blue-50 p-3 rounded-lg"><p className="text-sm font-semibold">Current: {movementForm.fromLocation}</p></div><div><label className="block text-sm font-semibold mb-1">New Location * (Format: A2-R3-B5)</label><input type="text" value={movementForm.toLocation} onChange={(e) => setMovementForm({...movementForm, toLocation: e.target.value})} className="w-full px-3 py-2 border rounded-lg" placeholder="A2-R3-B5" /></div><div><label className="block text-sm font-semibold mb-1">Moved By *</label><input type="text" value={movementForm.movedBy} onChange={(e) => setMovementForm({...movementForm, movedBy: e.target.value})} className="w-full px-3 py-2 border rounded-lg" /></div><div><label className="block text-sm font-semibold mb-1">Reason</label><textarea value={movementForm.reason} onChange={(e) => setMovementForm({...movementForm, reason: e.target.value})} className="w-full px-3 py-2 border rounded-lg" rows="2" /></div></div><div className="flex gap-3 mt-6"><button onClick={addMovement} className="flex-1 bg-orange-600 text-white px-6 py-3 rounded-xl font-semibold">Move File</button><button onClick={() => setShowMovementModal(false)} className="px-6 py-3 bg-gray-100 rounded-xl font-semibold">Cancel</button></div></div></div></div>)}{showQRModal && selectedFile && (<div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50"><div className="bg-white rounded-xl max-w-lg w-full"><div className="bg-indigo-600 px-6 py-4 flex items-center justify-between"><h2 className="text-xl font-bold text-white">QR Code</h2><button onClick={() => setShowQRModal(false)} className="text-white p-2"><X size={20} /></button></div><div className="p-8"><div className="bg-gradient-to-br from-blue-600 to-indigo-600 w-64 h-64 mx-auto rounded-xl flex items-center justify-center mb-4"><div className="text-white text-center"><QrCode size={120} className="mx-auto mb-4" /><p className="font-semibold">{selectedFile.fileNumber}</p></div></div><div className="bg-gray-50 p-4 rounded-xl"><p className="text-sm"><strong>File:</strong> {selectedFile.fileName}</p><p className="text-sm"><strong>Location:</strong> {selectedFile.almirah}-R{selectedFile.rack}-{selectedFile.row}{selectedFile.column}</p></div><button onClick={() => window.print()} className="w-full mt-4 bg-blue-600 text-white py-3 rounded-xl font-semibold flex items-center justify-center gap-2"><Printer size={18} /> Print QR</button></div></div></div>)}{showSettingsModal && (<div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50"><div className="bg-white rounded-xl max-w-2xl w-full"><div className="bg-gray-800 px-6 py-4 flex items-center justify-between"><h2 className="text-xl font-bold text-white">Settings</h2><button onClick={() => setShowSettingsModal(false)} className="text-white p-2"><X size={20} /></button></div><div className="p-6 space-y-4"><div><h3 className="font-bold mb-3">Auto File Numbering</h3><div className="space-y-3"><div className="flex justify-between items-center"><label>Enable</label><button onClick={() => setAutoNumberSettings({...autoNumberSettings, enabled: !autoNumberSettings.enabled})} className={`w-12 h-6 rounded-full ${autoNumberSettings.enabled ? 'bg-green-500' : 'bg-gray-300'}`}><div className={`w-5 h-5 bg-white rounded-full transition-transform ${autoNumberSettings.enabled ? 'translate-x-6' : 'translate-x-1'}`} /></button></div><div><label className="block text-sm font-semibold mb-1">Prefix</label><input type="text" value={autoNumberSettings.prefix} onChange={(e) => setAutoNumberSettings({...autoNumberSettings, prefix: e.target.value})} className="w-full px-3 py-2 border rounded-lg" /></div><div className="flex justify-between items-center"><label>Include Year</label><button onClick={() => setAutoNumberSettings({...autoNumberSettings, year: !autoNumberSettings.year})} className={`w-12 h-6 rounded-full ${autoNumberSettings.year ? 'bg-green-500' : 'bg-gray-300'}`}><div className={`w-5 h-5 bg-white rounded-full transition-transform ${autoNumberSettings.year ? 'translate-x-6' : 'translate-x-1'}`} /></button></div><div className="bg-blue-50 p-4 rounded-lg"><p className="text-sm font-semibold">Preview: {generateFileNumber()}</p></div></div></div><button onClick={() => setShowSettingsModal(false)} className="w-full bg-blue-600 text-white py-3 rounded-xl font-semibold">Save</button></div></div></div>)}</div>); } export default App;
